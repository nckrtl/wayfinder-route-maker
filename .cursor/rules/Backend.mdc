---
description: 
globs: 
alwaysApply: true
---
## General
- This project uses **PHP 8.4**.
- Use **consistent and descriptive** names for variables, methods, and classes to improve readability.
- Follow Laravel's conventions:
  - **Singular** for models (e.g., `User.php`).
  - **Plural** for controllers managing models (e.g., `UsersController.php`).
- For singular functionalities like registration or dashboards, use a singular controller name (e.g., `RegisterController`, `DashboardController`).
- Naming conventions:
  - **PascalCase** for class names.
  - **camelCase** for method names.
  - **snake_case** for database columns.
- **Avoid repeating plain string values** (e.g., statuses). Use an Enum instead, placed in `app\Enums`.
- Prefer `match()` over `switch()` for better readability and maintainability.
- Do **not** install or add Composer packages without prior approval.
- Do **not** create or modify migrations unrelated to the current task.

## Database and Eloquent
- Use **Eloquent ORM** and Query Builder over raw SQL queries whenever possible.
- Create **query scopes** in models when encountering repetitive query patterns.

## Migrations
- Use **descriptive** migration names.

## Routes
- Define all routes in **`web.php`**.
- Routes must use a **controller** and be **named**.
- Route naming convention: `{resource}.{method}` (e.g., `users.show` for `UsersController@show`).
- Each **public (unprotected) GET route** must be tested in `tests\Feature\RoutesTest.php` using `spatie/pest-plugin-route-testing`.
- Run `RoutesTest.php` after modifying or adding a public GET route.

## Controllers
- Use **resourceful controllers** with only the following public methods: `index`, `show`, `create`, `store`, `edit`, `update`, `destroy`.
- **Private methods** are allowed within controllers.
- Use **FormRequest** for all form validation.
- Create models using the **static `create()` method**, passing validated FormRequest data.
- Update models using the **static `update()` method**, passing validated FormRequest data.
- Always expect a **DTO** (Data Transfer Object) in FormRequests:
  ```php
  class SongController
  {
      public function __invoke(SongRequest $request): SongData
      {
          $data = $request->getData();
          
          $song = Song::create($data->toArray());
          
          return $data;
      }
  }
  ```
- When creating/updating models:
  - Use `$request->getData()` to get validated data.
  - Use `$data->toArray()` when passing data to `create()` or `update()`.
  - **Do not manually map DTO properties to models**.
- Controller classes should be **final** and **read-only**.
- This project uses **Laravel Inertia with Vue**:
  - Always return views using `Inertia::render(viewPath, data)`.
  - If a Vue file is missing, create it according to `Vue.mdc` guidelines.

## FormRequest
- A **FormRequest** is required for each controller method that validates input.
- Each FormRequest must specify a DTO as follows:
  ```php
  class SongRequest extends FormRequest
  {
      use WithData;
      
      protected function dataClass(): string
      {
          return SongData::class;
      }
  }
  ```
- Use the `WithData` trait from `Spatie\LaravelData`.
- Implement only two methods:
  - `authorize(): bool`
  - `dataClass(): string`
- **Do not implement**:
  - `rules()` → Place validation rules in the DTO.
  - `messages()` → Define validation messages in the DTO.
  - `toData()` → This is automatically handled by `WithData`.

## Models, Factories, and Seeders
- Document **model properties** using PHPDoc annotations.
- Always define **`protected $fillable`** and explicitly list fillable attributes.
- **Disable lazy loading**: Always eager-load relationships.
- Apply **attribute casts** (e.g., for dates and booleans).
- Create a **Factory** for each model.
- Create a **Seeder** for each model.
- Update **factories and seeders** when modifying model properties.
- **Models should be final classes**.

## Testing
- This project uses **Pest** for testing.
- Each new feature must include **Pest tests**, including **controller tests**.
- Do **not** delete tests.
- Do **not** modify unrelated tests.
- If a test fails:
  - Propose the required changes.
  - Get confirmation before modifying the test.

## Static Code Analysis
- We use **Larastan (`larastan/larastan`)** for static analysis.
- Always run `composer analyse` after adding a new feature.
- Use **Larastan level 9**.

## Arrays, Collections, and DTOs
- Prefer **collections (`Illuminate\Support\Collection`)** over arrays.
- Do **not** use plain arrays. Instead, create a **DTO**.
- Use the `spatie/laravel-data` package for DTOs.
- **Do not use validation attributes above DTO properties**.
- All validation rules must be defined in:
  ```php
  public static function rules(): array
  ```

## Forms
- Always create a **DTO** for handling form data in FormRequests.
- Pass DTO instances as a `form` data prop to Inertia views:
  ```php
  return Inertia::render('Auth/Register', [
      'form' => RegisterData::empty(),
  ]);
  ```
- The corresponding Vue file should define the form type automatically.

## Security
- Prevent **SQL injection vulnerabilities** by always using FormRequests to validate user input.
- Avoid exposing sensitive data in responses.
