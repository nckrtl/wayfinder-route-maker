---
description: 
globs: 
alwaysApply: true
---
You are an expert in TypeScript, Node.js, Vue 3, VueUse, and Tailwind.

## Code Style and Structure
- Write concise, well-structured TypeScript code with accurate, technical examples.
- Use the Composition API and declarative programming patterns; avoid the Options API.
- Prefer iteration and modularization over code duplication.
- Use clear, descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).
- Follow a structured file organization:
  - Exported components
  - Composables
  - Helpers
  - Static content
  - Types
- Keep components small and focused, ensuring single responsibility.

## Naming Conventions
- Use **lowercase with dashes** for directories (e.g., `components/auth-wizard`).
- Use **PascalCase** for component names (e.g., `AuthWizard.vue`).
- Use **camelCase** for composables (e.g., `useAuthState.ts`).
- Maintain consistency across files and folders.

## TypeScript Best Practices
- Use TypeScript exclusively; prefer **types** over **interfaces**.
- Avoid `enum`; use `const` objects instead for better tree-shaking.
- Use Vue 3 with TypeScript, leveraging `defineComponent` and `PropType`.
- Always type function arguments and return values.

## Vue 3 and Composition API Best Practices
- Ensure each file starts with `<script setup>` followed by the `<template>` tag.
- Use **ref**, **reactive**, and **computed** for reactive state management.
- Prefer `defineProps` and `defineEmits` for prop handling and event emission.
- Use `provide/inject` for dependency injection where appropriate.
- Extract reusable logic into composables (`useXYZ.ts`).
- Keep template logic clean and minimal—move logic into the script section.

## Auto-Imported Components and Methods
- The project uses `unplugin-auto-import` and `unplugin-vue-components` for automatic imports.
- Before manually importing, check:
  - `resources/js/types/auto-imports.d.ts` for globally available methods.
  - `resources/js/types/components.d.ts` for globally available components.
  - `vite.config.ts` for auto-import configurations.
- Do **not** manually import methods or components listed in these files.
- Examples of auto-imported items:
  - Vue methods (`ref`, `computed`, etc.).
  - Inertia.js methods (`useForm`, `Link`, etc.).
  - VueUse composables.
  - UI components from configured libraries (`vite.config.ts`).

## Forms
- Expect a **form prop** to be available in components handling forms:
```ts
const props = defineProps<{ resource: App.Data.ResourceData }>();
```
- The `resource` object contains the initial form structure.
- Instantiate the form with:
```ts
const form = useForm(props.resource);
```
### Form Props and Types
- Always use types from `resources/js/types/generated.d.ts` for form props.
- Define props using the generated type, e.g., `form: App.Data.ResourceData`.
- **Never manually define interfaces** for form data.

### Form Handling
- Use `useForm(props.form)` **directly**.
- Do **not** create an empty form object manually.
- Expect the form prop to contain initial backend values.

## Component Usage
- Only use components that are already available in the project.
- Do **not** introduce new UI component libraries or frameworks.
- Prefer native HTML elements if no suitable component exists.
- Before adding new components, check `resources/js/Components` for reusable options.

## Template Structure
- Keep the **original template structure** unless explicitly instructed otherwise.
- Do **not** modify styling or layout without approval.
- Focus strictly on **form-related changes** when updating form handling.

## Performance and Optimization
- Use lazy loading and dynamic imports for large components.
- Avoid unnecessary reactivity—use `computed` instead of `watch` where possible.
- Minimize DOM manipulations; avoid v-if inside loops if v-show can be used.
